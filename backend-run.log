
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.3.3)

2025-08-28T07:07:32.820Z  INFO 3574 --- [food-delivery] [           main] com.foodapp.FoodDeliveryApplication      : Starting FoodDeliveryApplication v0.0.1-SNAPSHOT using Java 21.0.7 with PID 3574 (/workspace/food-delivery-backend/target/food-delivery-0.0.1-SNAPSHOT.jar started by ubuntu in /workspace)
2025-08-28T07:07:32.822Z  INFO 3574 --- [food-delivery] [           main] com.foodapp.FoodDeliveryApplication      : The following 1 profile is active: "dev"
2025-08-28T07:07:33.647Z  INFO 3574 --- [food-delivery] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-08-28T07:07:33.694Z  INFO 3574 --- [food-delivery] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 41 ms. Found 8 JPA repository interfaces.
2025-08-28T07:07:34.197Z  INFO 3574 --- [food-delivery] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8081 (http)
2025-08-28T07:07:34.210Z  INFO 3574 --- [food-delivery] [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-08-28T07:07:34.211Z  INFO 3574 --- [food-delivery] [           main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.28]
2025-08-28T07:07:34.232Z  INFO 3574 --- [food-delivery] [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2025-08-28T07:07:34.233Z  INFO 3574 --- [food-delivery] [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1375 ms
2025-08-28T07:07:34.350Z  INFO 3574 --- [food-delivery] [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-08-28T07:07:34.497Z  INFO 3574 --- [food-delivery] [           main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:foodapp user=SA
2025-08-28T07:07:34.498Z  INFO 3574 --- [food-delivery] [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-08-28T07:07:34.505Z  INFO 3574 --- [food-delivery] [           main] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:foodapp'
2025-08-28T07:07:34.662Z  INFO 3574 --- [food-delivery] [           main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-08-28T07:07:34.692Z  INFO 3574 --- [food-delivery] [           main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.5.2.Final
2025-08-28T07:07:34.712Z  INFO 3574 --- [food-delivery] [           main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-08-28T07:07:34.891Z  INFO 3574 --- [food-delivery] [           main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-08-28T07:07:35.725Z  INFO 3574 --- [food-delivery] [           main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
Hibernate: 
    drop table if exists cart_items cascade 
Hibernate: 
    drop table if exists carts cascade 
Hibernate: 
    drop table if exists coupons cascade 
Hibernate: 
    drop table if exists menu_items cascade 
Hibernate: 
    drop table if exists order_items cascade 
Hibernate: 
    drop table if exists orders cascade 
Hibernate: 
    drop table if exists payments cascade 
Hibernate: 
    drop table if exists restaurants cascade 
Hibernate: 
    drop table if exists reviews cascade 
Hibernate: 
    drop table if exists users cascade 
Hibernate: 
    create table cart_items (
        quantity integer,
        cart_id bigint,
        id bigint generated by default as identity,
        menu_item_id bigint,
        primary key (id)
    )
Hibernate: 
    create table carts (
        id bigint generated by default as identity,
        user_id bigint unique,
        primary key (id)
    )
Hibernate: 
    create table coupons (
        active boolean,
        amount_off numeric(38,2),
        percentage_off numeric(38,2),
        id bigint generated by default as identity,
        valid_from timestamp(6) with time zone,
        valid_until timestamp(6) with time zone,
        code varchar(255) not null unique,
        primary key (id)
    )
Hibernate: 
    create table menu_items (
        available boolean,
        price numeric(38,2) not null,
        id bigint generated by default as identity,
        restaurant_id bigint,
        category varchar(255) not null,
        description varchar(255),
        image_url varchar(255),
        name varchar(255) not null,
        primary key (id)
    )
Hibernate: 
    create table order_items (
        price numeric(38,2),
        quantity integer,
        id bigint generated by default as identity,
        menu_item_id bigint,
        order_id bigint,
        primary key (id)
    )
Hibernate: 
    create table orders (
        discount numeric(38,2),
        subtotal numeric(38,2),
        total numeric(38,2),
        created_at timestamp(6) with time zone,
        id bigint generated by default as identity,
        restaurant_id bigint,
        user_id bigint,
        payment_status varchar(255),
        status varchar(255),
        primary key (id)
    )
Hibernate: 
    create table payments (
        amount numeric(38,2),
        created_at timestamp(6) with time zone,
        id bigint generated by default as identity,
        order_id bigint unique,
        provider varchar(255),
        provider_order_id varchar(255),
        provider_payment_id varchar(255),
        provider_signature varchar(255),
        status varchar(255),
        primary key (id)
    )
Hibernate: 
    create table restaurants (
        average_rating numeric(38,2),
        delivery_time integer,
        latitude float(53),
        longitude float(53),
        id bigint generated by default as identity,
        city varchar(255),
        country varchar(255),
        cuisine varchar(255),
        image_url varchar(255),
        line1 varchar(255),
        line2 varchar(255),
        location varchar(255),
        name varchar(255) not null,
        phone varchar(255),
        postal_code varchar(255),
        price_range varchar(255),
        state varchar(255),
        primary key (id)
    )
Hibernate: 
    create table reviews (
        approved boolean,
        rating integer,
        created_at timestamp(6) with time zone,
        id bigint generated by default as identity,
        restaurant_id bigint,
        user_id bigint,
        comment varchar(255),
        primary key (id)
    )
Hibernate: 
    create table users (
        blocked boolean,
        id bigint generated by default as identity,
        address varchar(255),
        email varchar(255) not null unique,
        name varchar(255) not null,
        password varchar(255) not null,
        phone varchar(255),
        role enum ('ADMIN','CUSTOMER') not null,
        primary key (id)
    )
Hibernate: 
    alter table if exists cart_items 
       add constraint FKpcttvuq4mxppo8sxggjtn5i2c 
       foreign key (cart_id) 
       references carts
Hibernate: 
    alter table if exists cart_items 
       add constraint FK5ishcgpt4w7kbpwmh9e0mio8s 
       foreign key (menu_item_id) 
       references menu_items
Hibernate: 
    alter table if exists carts 
       add constraint FKb5o626f86h46m4s7ms6ginnop 
       foreign key (user_id) 
       references users
Hibernate: 
    alter table if exists menu_items 
       add constraint FKhaqtoboitpl0n541y0sc753my 
       foreign key (restaurant_id) 
       references restaurants
Hibernate: 
    alter table if exists order_items 
       add constraint FKdtfg1f49yr5yye2fpl2xid2xo 
       foreign key (menu_item_id) 
       references menu_items
Hibernate: 
    alter table if exists order_items 
       add constraint FKbioxgbv59vetrxe0ejfubep1w 
       foreign key (order_id) 
       references orders
Hibernate: 
    alter table if exists orders 
       add constraint FK2m9qulf12xm537bku3jnrrbup 
       foreign key (restaurant_id) 
       references restaurants
Hibernate: 
    alter table if exists orders 
       add constraint FK32ql8ubntj5uh44ph9659tiih 
       foreign key (user_id) 
       references users
Hibernate: 
    alter table if exists payments 
       add constraint FK81gagumt0r8y3rmudcgpbk42l 
       foreign key (order_id) 
       references orders
Hibernate: 
    alter table if exists reviews 
       add constraint FKsu8ow2q842enesfbqphjrfi5g 
       foreign key (restaurant_id) 
       references restaurants
Hibernate: 
    alter table if exists reviews 
       add constraint FKcgy7qjc1r99dp117y9en6lxye 
       foreign key (user_id) 
       references users
2025-08-28T07:07:35.772Z  INFO 3574 --- [food-delivery] [           main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-08-28T07:07:35.945Z  INFO 3574 --- [food-delivery] [           main] o.s.d.j.r.query.QueryEnhancerFactory     : Hibernate is in classpath; If applicable, HQL parser will be used.
2025-08-28T07:07:36.593Z  WARN 3574 --- [food-delivery] [           main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-08-28T07:07:36.618Z  WARN 3574 --- [food-delivery] [           main] .s.s.UserDetailsServiceAutoConfiguration : 

Using generated security password: dffd9d62-7328-4068-a57d-07d770b7a259

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-08-28T07:07:36.622Z  INFO 3574 --- [food-delivery] [           main] r$InitializeUserDetailsManagerConfigurer : Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-08-28T07:07:36.927Z  INFO 3574 --- [food-delivery] [           main] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 2 endpoints beneath base path '/actuator'
2025-08-28T07:07:37.240Z  INFO 3574 --- [food-delivery] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8081 (http) with context path '/'
2025-08-28T07:07:37.250Z  INFO 3574 --- [food-delivery] [           main] com.foodapp.FoodDeliveryApplication      : Started FoodDeliveryApplication in 4.714 seconds (process running for 5.039)
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        au1_0.id,
        au1_0.address,
        au1_0.blocked,
        au1_0.email,
        au1_0.name,
        au1_0.password,
        au1_0.phone,
        au1_0.role 
    from
        users au1_0 
    where
        au1_0.email=?
Hibernate: 
    insert 
    into
        users
        (address, blocked, email, name, password, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    select
        count(*) 
    from
        restaurants r1_0
Hibernate: 
    insert 
    into
        restaurants
        (city, country, latitude, line1, line2, longitude, postal_code, state, average_rating, cuisine, delivery_time, image_url, location, name, phone, price_range, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        menu_items
        (available, category, description, image_url, name, price, restaurant_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        menu_items
        (available, category, description, image_url, name, price, restaurant_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        menu_items
        (available, category, description, image_url, name, price, restaurant_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    select
        au1_0.id,
        au1_0.address,
        au1_0.blocked,
        au1_0.email,
        au1_0.name,
        au1_0.password,
        au1_0.phone,
        au1_0.role 
    from
        users au1_0 
    where
        au1_0.email=?
Hibernate: 
    insert 
    into
        reviews
        (approved, comment, created_at, rating, restaurant_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    select
        au1_0.id,
        au1_0.address,
        au1_0.blocked,
        au1_0.email,
        au1_0.name,
        au1_0.password,
        au1_0.phone,
        au1_0.role 
    from
        users au1_0 
    where
        au1_0.email=?
Hibernate: 
    insert 
    into
        reviews
        (approved, comment, created_at, rating, restaurant_id, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        restaurants
        (city, country, latitude, line1, line2, longitude, postal_code, state, average_rating, cuisine, delivery_time, image_url, location, name, phone, price_range, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        menu_items
        (available, category, description, image_url, name, price, restaurant_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        menu_items
        (available, category, description, image_url, name, price, restaurant_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        menu_items
        (available, category, description, image_url, name, price, restaurant_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        restaurants
        (city, country, latitude, line1, line2, longitude, postal_code, state, average_rating, cuisine, delivery_time, image_url, location, name, phone, price_range, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        menu_items
        (available, category, description, image_url, name, price, restaurant_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        menu_items
        (available, category, description, image_url, name, price, restaurant_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        menu_items
        (available, category, description, image_url, name, price, restaurant_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    select
        c1_0.id,
        c1_0.active,
        c1_0.amount_off,
        c1_0.code,
        c1_0.percentage_off,
        c1_0.valid_from,
        c1_0.valid_until 
    from
        coupons c1_0 
    where
        upper(c1_0.code)=upper(?)
Hibernate: 
    insert 
    into
        coupons
        (active, amount_off, code, percentage_off, valid_from, valid_until, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    select
        c1_0.id,
        c1_0.active,
        c1_0.amount_off,
        c1_0.code,
        c1_0.percentage_off,
        c1_0.valid_from,
        c1_0.valid_until 
    from
        coupons c1_0 
    where
        upper(c1_0.code)=upper(?)
Hibernate: 
    insert 
    into
        coupons
        (active, amount_off, code, percentage_off, valid_from, valid_until, id) 
    values
        (?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        restaurants
        (city, country, latitude, line1, line2, longitude, postal_code, state, average_rating, cuisine, delivery_time, image_url, location, name, phone, price_range, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        menu_items
        (available, category, description, image_url, name, price, restaurant_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        menu_items
        (available, category, description, image_url, name, price, restaurant_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        menu_items
        (available, category, description, image_url, name, price, restaurant_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        restaurants
        (city, country, latitude, line1, line2, longitude, postal_code, state, average_rating, cuisine, delivery_time, image_url, location, name, phone, price_range, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        menu_items
        (available, category, description, image_url, name, price, restaurant_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        menu_items
        (available, category, description, image_url, name, price, restaurant_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        menu_items
        (available, category, description, image_url, name, price, restaurant_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        restaurants
        (city, country, latitude, line1, line2, longitude, postal_code, state, average_rating, cuisine, delivery_time, image_url, location, name, phone, price_range, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        menu_items
        (available, category, description, image_url, name, price, restaurant_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        menu_items
        (available, category, description, image_url, name, price, restaurant_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        menu_items
        (available, category, description, image_url, name, price, restaurant_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        menu_items
        (available, category, description, image_url, name, price, restaurant_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        restaurants
        (city, country, latitude, line1, line2, longitude, postal_code, state, average_rating, cuisine, delivery_time, image_url, location, name, phone, price_range, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        menu_items
        (available, category, description, image_url, name, price, restaurant_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        menu_items
        (available, category, description, image_url, name, price, restaurant_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        menu_items
        (available, category, description, image_url, name, price, restaurant_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        restaurants
        (city, country, latitude, line1, line2, longitude, postal_code, state, average_rating, cuisine, delivery_time, image_url, location, name, phone, price_range, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        menu_items
        (available, category, description, image_url, name, price, restaurant_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        menu_items
        (available, category, description, image_url, name, price, restaurant_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        menu_items
        (available, category, description, image_url, name, price, restaurant_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        restaurants
        (city, country, latitude, line1, line2, longitude, postal_code, state, average_rating, cuisine, delivery_time, image_url, location, name, phone, price_range, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        menu_items
        (available, category, description, image_url, name, price, restaurant_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        menu_items
        (available, category, description, image_url, name, price, restaurant_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        menu_items
        (available, category, description, image_url, name, price, restaurant_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        restaurants
        (city, country, latitude, line1, line2, longitude, postal_code, state, average_rating, cuisine, delivery_time, image_url, location, name, phone, price_range, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        menu_items
        (available, category, description, image_url, name, price, restaurant_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        menu_items
        (available, category, description, image_url, name, price, restaurant_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        menu_items
        (available, category, description, image_url, name, price, restaurant_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
2025-08-28T07:07:45.993Z  INFO 3574 --- [food-delivery] [nio-8081-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-08-28T07:07:45.994Z  INFO 3574 --- [food-delivery] [nio-8081-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2025-08-28T07:07:45.995Z  INFO 3574 --- [food-delivery] [nio-8081-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        r1_0.id,
        r1_0.city,
        r1_0.country,
        r1_0.latitude,
        r1_0.line1,
        r1_0.line2,
        r1_0.longitude,
        r1_0.postal_code,
        r1_0.state,
        r1_0.average_rating,
        r1_0.cuisine,
        r1_0.delivery_time,
        r1_0.image_url,
        r1_0.location,
        r1_0.name,
        r1_0.phone,
        r1_0.price_range 
    from
        restaurants r1_0 
    where
        (
            ? is null 
            or lower(r1_0.name) like lower(('%'||?||'%')) escape ''
        ) 
        and (
            ? is null 
            or lower(r1_0.cuisine)=lower(?)
        ) 
    fetch
        first ? rows only
Hibernate: 
    select
        count(r1_0.id) 
    from
        restaurants r1_0 
    where
        (
            ? is null 
            or lower(r1_0.name) like lower(('%'||?||'%')) escape ''
        ) 
        and (
            ? is null 
            or lower(r1_0.cuisine)=lower(?)
        )
2025-08-28T07:08:14.116Z  WARN 3574 --- [food-delivery] [nio-8081-exec-4] ration$PageModule$WarningLoggingModifier : Serializing PageImpl instances as-is is not supported, meaning that there is no guarantee about the stability of the resulting JSON structure!
	For a stable JSON structure, please use Spring Data's PagedModel (globally via @EnableSpringDataWebSupport(pageSerializationMode = VIA_DTO))
	or Spring HATEOAS and Spring Data's PagedResourcesAssembler as documented in https://docs.spring.io/spring-data/commons/reference/repositories/core-extensions.html#core.web.pageables.

Hibernate: 
    select
        mi1_0.restaurant_id,
        mi1_0.id,
        mi1_0.available,
        mi1_0.category,
        mi1_0.description,
        mi1_0.image_url,
        mi1_0.name,
        mi1_0.price 
    from
        menu_items mi1_0 
    where
        mi1_0.restaurant_id=?
Hibernate: 
    select
        mi1_0.restaurant_id,
        mi1_0.id,
        mi1_0.available,
        mi1_0.category,
        mi1_0.description,
        mi1_0.image_url,
        mi1_0.name,
        mi1_0.price 
    from
        menu_items mi1_0 
    where
        mi1_0.restaurant_id=?
Hibernate: 
    select
        mi1_0.restaurant_id,
        mi1_0.id,
        mi1_0.available,
        mi1_0.category,
        mi1_0.description,
        mi1_0.image_url,
        mi1_0.name,
        mi1_0.price 
    from
        menu_items mi1_0 
    where
        mi1_0.restaurant_id=?
Hibernate: 
    select
        mi1_0.restaurant_id,
        mi1_0.id,
        mi1_0.available,
        mi1_0.category,
        mi1_0.description,
        mi1_0.image_url,
        mi1_0.name,
        mi1_0.price 
    from
        menu_items mi1_0 
    where
        mi1_0.restaurant_id=?
Hibernate: 
    select
        mi1_0.restaurant_id,
        mi1_0.id,
        mi1_0.available,
        mi1_0.category,
        mi1_0.description,
        mi1_0.image_url,
        mi1_0.name,
        mi1_0.price 
    from
        menu_items mi1_0 
    where
        mi1_0.restaurant_id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
Hibernate: 
    select
        o1_0.id,
        o1_0.created_at,
        o1_0.discount,
        o1_0.payment_status,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.subtotal,
        o1_0.total,
        o1_0.user_id 
    from
        orders o1_0
